"use strict";
import {
  VAny,
  VArray,
  VBoolean,
  VBytes,
  VFloat64,
  VId,
  VInt64,
  VLiteral,
  VNull,
  VObject,
  VRecord,
  VString,
  VUnion
} from "./validators.js";
export function isValidator(v2) {
  return !!v2.isConvexValidator;
}
export function asObjectValidator(obj) {
  if (isValidator(obj)) {
    return obj;
  } else {
    return v.object(obj);
  }
}
export const v = {
  id(tableName) {
    return new VId({
      isOptional: "required",
      tableName
    });
  },
  null() {
    return new VNull({ isOptional: "required" });
  },
  /**
   * Alias for `v.float64()`
   */
  number() {
    return new VFloat64({ isOptional: "required" });
  },
  float64() {
    return new VFloat64({ isOptional: "required" });
  },
  /**
   * @deprecated Use `v.int64()` instead
   */
  bigint() {
    return new VInt64({ isOptional: "required" });
  },
  int64() {
    return new VInt64({ isOptional: "required" });
  },
  boolean() {
    return new VBoolean({ isOptional: "required" });
  },
  string() {
    return new VString({ isOptional: "required" });
  },
  bytes() {
    return new VBytes({ isOptional: "required" });
  },
  literal(literal) {
    return new VLiteral({ isOptional: "required", value: literal });
  },
  array(element) {
    return new VArray({ isOptional: "required", element });
  },
  object(fields) {
    return new VObject({ isOptional: "required", fields });
  },
  /** @internal */
  record(keys, values) {
    return new VRecord({
      isOptional: "required",
      key: keys,
      value: values
    });
  },
  union(...members) {
    return new VUnion({
      isOptional: "required",
      members
    });
  },
  any() {
    return new VAny({ isOptional: "required" });
  },
  optional(value) {
    return value.asOptional();
  }
};
//# sourceMappingURL=validator.js.map

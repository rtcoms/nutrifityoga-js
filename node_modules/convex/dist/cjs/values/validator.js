"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var validator_exports = {};
__export(validator_exports, {
  asObjectValidator: () => asObjectValidator,
  isValidator: () => isValidator,
  v: () => v
});
module.exports = __toCommonJS(validator_exports);
var import_validators = require("./validators.js");
function isValidator(v2) {
  return !!v2.isConvexValidator;
}
function asObjectValidator(obj) {
  if (isValidator(obj)) {
    return obj;
  } else {
    return v.object(obj);
  }
}
const v = {
  id(tableName) {
    return new import_validators.VId({
      isOptional: "required",
      tableName
    });
  },
  null() {
    return new import_validators.VNull({ isOptional: "required" });
  },
  /**
   * Alias for `v.float64()`
   */
  number() {
    return new import_validators.VFloat64({ isOptional: "required" });
  },
  float64() {
    return new import_validators.VFloat64({ isOptional: "required" });
  },
  /**
   * @deprecated Use `v.int64()` instead
   */
  bigint() {
    return new import_validators.VInt64({ isOptional: "required" });
  },
  int64() {
    return new import_validators.VInt64({ isOptional: "required" });
  },
  boolean() {
    return new import_validators.VBoolean({ isOptional: "required" });
  },
  string() {
    return new import_validators.VString({ isOptional: "required" });
  },
  bytes() {
    return new import_validators.VBytes({ isOptional: "required" });
  },
  literal(literal) {
    return new import_validators.VLiteral({ isOptional: "required", value: literal });
  },
  array(element) {
    return new import_validators.VArray({ isOptional: "required", element });
  },
  object(fields) {
    return new import_validators.VObject({ isOptional: "required", fields });
  },
  /** @internal */
  record(keys, values) {
    return new import_validators.VRecord({
      isOptional: "required",
      key: keys,
      value: values
    });
  },
  union(...members) {
    return new import_validators.VUnion({
      isOptional: "required",
      members
    });
  },
  any() {
    return new import_validators.VAny({ isOptional: "required" });
  },
  optional(value) {
    return value.asOptional();
  }
};
//# sourceMappingURL=validator.js.map
